type Query {
    getUserById(userId: String!): UserResponse
    getAllUsers: UserResponse
    getHostById(hostId: String!, includeUserInfo: Boolean = false): HostSearchResponse
    getAllHosts(includeUserInfo: Boolean = false): HostSearchResponse
    getGuestById(guestId: String!, includeUserInfo: Boolean = false): GuestSearchResponse
    getAllGuests(includeUserInfo: Boolean = false): GuestSearchResponse
}

type Mutation{
    createUpdateHost(hostCreateUpdateRequest: HostCreateUpdateRequest): HostResponse
    createUser(userCreateUpdateRequest: UserCreateUpdateRequest): UserResponse
    updateUser(userCreateUpdateRequest: UserCreateUpdateRequest): UserResponse
    createGuest(guestCreateUpdateRequest: GuestCreateUpdateRequest): GuestResponse
    updateGuest(guestCreateUpdateRequest: GuestCreateUpdateRequest): GuestResponse
}

type User {
    id: ID #remove
    userId: String
    firstName: String
    lastName: String
    phone: [Phone]
    email: [Email]
    primaryContactMethod: ContactMethod
    createdDate: String
    lastUpdated: String

}

type Host {
    id: ID #remove
    hostId: String
    userId: String
    address: Address
    beds: Int
    crib: Boolean
    fullBath: Boolean
    privateEntrance: Boolean
    notes: String
    createdDate: String
    lastUpdated: String
}

type Guest{
    id: ID #remove
    guestId: String
    userId: String
    nickName: String
    numAdults: Int
    numChildren: Int
    crib: Boolean
    notes: String
    createdDate: String
    lastUpdated: String
}

type UserResponse{
    message: String
    userList: [User]
}

type HostResponse{
    message: String
    host: Host
    user: User
}

type GuestResponse{
    message: String
    guest: Guest
}

type HostSearchResponse{
    message: String
    hostDetailsList: [HostDetails]
}

type HostDetails{
    host: Host
    user: User
}

type GuestSearchResponse{
    message: String
    guestDetailsList: [GuestDetails]
}

type GuestDetails{
    guest: Guest
    user: User
}

input UserCreateUpdateRequest{
    user: UserInput
}

input HostCreateUpdateRequest{
    isAddressUpdate: Boolean = false
    isUserUpdate: Boolean = false
    host: HostInput
    user: UserInput
}

input GuestCreateUpdateRequest{
    guest: GuestInput
}

input UserInput{
    id: ID # remove
    userId: String
    lastName: String
    firstName: String
    phone: [PhoneInput]
    email: [EmailInput]
    primaryContactMethod: ContactMethod
}

input HostInput {
    id: ID #remove
    hostId: String
    userId: String
    address: AddressInput
    beds: Int
    crib: Boolean
    fullBath: Boolean
    privateEntrance: Boolean
    notes: String
}

input GuestInput{
    id: ID # remove
    guestId: String
    userId: String
    nickName: String
    numAdults: Int
    numChildrean: Int
    crib: Boolean
    notes: String
}

type Phone {
    phoneType: PhoneType
    value: String
    isPrimary: Boolean
}

input PhoneInput {
    phoneType: PhoneType
    value: String
    isPrimary: Boolean
}

enum PhoneType {
    HOME
    WORK
    MOBILE
}

type Email {
    emailType: EmailType
    value: String
    isPrimary: Boolean
}

input EmailInput {
    emailType: EmailType
    value: String
    isPrimary: Boolean
}

enum EmailType {
    PERSONAL
    WORK
}

type Address {
    addressLine1: String
    addressLine2: String
    city: String
    state: String
    zip: String
}

input AddressInput {
    addressLine1: String
    addressLine2: String
    city: String
    state: String
    zip: String
}

enum ContactMethod {
    PHONE
    EMAIL
}



